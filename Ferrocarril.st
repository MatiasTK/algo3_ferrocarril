Object subclass: #Pasaje	instanceVariableNames: ''	classVariableNames: ''	package: 'Ferrocarril'!!Pasaje methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 10/10/2023 16:39'!calcularPrecio! !Error subclass: #ViajeNoVigente	instanceVariableNames: ''	classVariableNames: ''	package: 'Ferrocarril'!Object subclass: #ViajePromocional	instanceVariableNames: 'pasajes descuento vigente'	classVariableNames: ''	package: 'Ferrocarril'!!ViajePromocional methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 10/10/2023 16:35'!agregarPasaje: unPasaje	pasajes add: unPasaje.! !!ViajePromocional methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 10/10/2023 16:42'!calcularPrecioPromocional	| total |	vigente esVigente ifFalse: [ ViajeNoVigente new signal ].	total := 0.	pasajes do: [ :p |  total := total + p calcularPrecio ].	^ total * descuento.! !!ViajePromocional methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 10/10/2023 16:45'!registrarViajePromocionalConPasaje: unPasaje conVigencia: unaVigencia	self agregarPasaje: unPasaje.	vigente := unaVigencia.! !!ViajePromocional methodsFor: 'initialization' stamp: 'MatiasVallejos 10/10/2023 16:37'!initialize	pasajes := OrderedCollection new.	descuento := 0.8.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajePromocional class	instanceVariableNames: ''!!ViajePromocional class methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 10/10/2023 16:45'!registrarViajePromocionalConPasaje: unPasaje conVigencia: unaVigencia	| viaje |	viaje := ViajePromocional new.	viaje registrarViajePromocionalConPasaje:  unPasaje conVigencia: unaVigencia.	^ viaje.! !TestCase subclass: #ViajePromocionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Ferrocarril'!!ViajePromocionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 10/17/2023 16:50'!testPuedoViajarConPromocional	| tren categoria tramo pasaje vigencia viaje total|		tren := TrenAltaVelocidad registrar: 500.	categoria := CategoriaPrimera registrar: 1000.	tramo := Tramo registrarConTren: tren conCategoria: categoria.	pasaje := Pasaje registrarPasaje: tramo.	vigencia := VigenciaPermanente new.	viaje := ViajePromocional registrarViajePromocionalConPasaje: pasaje conVigencia: vigencia.		"Precio tramo"	total := 500 + 1000.	"Precio tramo y pasaje"	total := total * 1.	"Precio viaje final con descuento"	total := total * 0.8.		self assert: viaje calcularPrecioPromocional equals: total.			! !Object subclass: #VigenciaPermanente	instanceVariableNames: ''	classVariableNames: ''	package: 'Ferrocarril'!!VigenciaPermanente methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 10/10/2023 16:42'!esVigente	^ true.! !